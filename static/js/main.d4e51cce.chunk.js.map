{"version":3,"sources":["data-processing/getNotesFromLocalStorage.ts","data-processing/updateNotesInLocalStorage.ts","components/Notes/Notes.tsx","data-processing/deleteNoteFromLocalStorage.ts","components/Edit/Edit.tsx","data-processing/editNoteInLocalStorage.tsx","data-processing/addNoteToLocalStorage.ts","App.tsx","index.tsx"],"names":["getNotesFromLocalStorage","localStorageData","localStorage","getItem","JSON","parse","updateNotesInLocalStorage","data","setItem","stringify","Notes","notes","listRerenderQuery","passNoteForEdit","history","useHistory","deleteNote","id","targetId","updatedNotes","filter","deleteNoteFromLocalStorage","className","map","note","title","text","type","onClick","push","editeNote","Edit","chosenNoteForEdit","cleanUpNoteForEdit","useState","setTitle","setText","redirect","setRedirect","useEffect","inputChangeHandle","event","target","name","value","saveNote","preventDefault","targetNoteId","preparedNote","targetNoteIndex","findIndex","editedNotes","splice","editNoteInLocalStorage","noteToPush","length","addNoteToLocalStorage","action","onSubmit","to","placeholder","onChange","disabled","App","notesFromLocalStorage","setNotes","noteForEdit","setNoteForEdit","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4e51cce.chunk.js","sourcesContent":["import { Note } from '../typedefs/Note';\n\nexport const getNotesFromLocalStorage = (): Note[] | null => {\n  const localStorageData = localStorage.getItem('notes');\n\n  if (typeof localStorageData === 'string') {\n    return JSON.parse(localStorageData);\n  }\n\n  return localStorageData;\n};\n","import { Note } from '../typedefs/Note';\n\nexport const updateNotesInLocalStorage = (\n  data: Note[] | null,\n) => {\n  localStorage.setItem('notes', JSON.stringify(data));\n};\n","import React, { useState } from 'react';\nimport { Redirect, Route, useHistory } from 'react-router-dom';\nimport { deleteNoteFromLocalStorage } from '../../data-processing/deleteNoteFromLocalStorage';\nimport { getNotesFromLocalStorage } from '../../data-processing/getNotesFromLocalStorage';\nimport { Note } from '../../typedefs/Note';\nimport { Edit } from '../Edit';\nimport './Notes.scss';\n\ninterface Props {\n  notes: Note[] | null,\n  listRerenderQuery: (par: Note[] | null) => void,\n  passNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Notes: React.FC<Props> = ({\n  notes,\n  listRerenderQuery,\n  passNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const deleteNote = (id: number) => {\n    deleteNoteFromLocalStorage(id);\n    listRerenderQuery(getNotesFromLocalStorage());\n  };\n\n  const editeNote = (note: Note) => {\n    passNoteForEdit(note);\n    history.push('/edit');\n  };\n  \n  return (\n    <ul className=\"Notes\">\n      {notes && notes.map((note) => (\n        <li className=\"Notes__note\" key={note.id}>\n          \n          <h3 className=\"Notes__note-title\">\n            {note.title}\n          </h3>\n          <p className=\"Notes__note-text\">\n            {note.text}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              editeNote(note);\n            }}\n            className=\"Notes__note-edit\"\n          >\n            Edit\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              deleteNote(note.id);\n            }}\n            className=\"Notes__note-delete\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const deleteNoteFromLocalStorage = (targetId: number) => {\n  const notes = getNotesFromLocalStorage();\n  const updatedNotes = notes?.filter(\n    ({ id }) => id !== targetId,\n  );\n\n  updateNotesInLocalStorage(updatedNotes || null);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { addNoteToLocalStorage } from '../../data-processing/addNoteToLocalStorage';\nimport { editNoteInLocalStorage } from '../../data-processing/editNoteInLocalStorage';\nimport { getNotesFromLocalStorage } from '../../data-processing/getNotesFromLocalStorage';\n\nimport { Note } from '../../typedefs/Note';\n\ninterface Props {\n  listRerenderQuery: (par: Note[] | null) => void,\n  chosenNoteForEdit: Note | null,\n  cleanUpNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Edit: React.FC<Props> = ({\n  listRerenderQuery,\n  chosenNoteForEdit,\n  cleanUpNoteForEdit,\n}) => {\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [redirect, setRedirect] = useState(false);\n\n  useEffect(() => {\n    if (chosenNoteForEdit?.title) {\n      setTitle(chosenNoteForEdit.title);\n    }\n\n    if (chosenNoteForEdit?.text) {\n      setText(chosenNoteForEdit.text);\n    }\n  }, []);\n\n  const inputChangeHandle = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'title':\n        setTitle(event.target.value);\n        break;\n      case 'text':\n        setText(event.target.value);\n        break;\n      default:\n    }\n  };\n\n  const saveNote = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (chosenNoteForEdit) {\n      editNoteInLocalStorage(\n        chosenNoteForEdit.id,\n        title,\n        text,\n      );\n      setTitle('');\n      setText('');\n      cleanUpNoteForEdit(null);\n    } else {\n      addNoteToLocalStorage(title, text);\n    }\n\n    listRerenderQuery(getNotesFromLocalStorage());\n    setRedirect(true);\n  };\n\n  return (\n    <form\n      action=\"\"\n      onSubmit={saveNote}\n    >\n      {redirect && <Redirect to=\"/\" />}\n\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={title}\n        onChange={inputChangeHandle}\n        name=\"title\"\n      />\n      <textarea\n        placeholder=\"Text\"\n        value={text}\n        onChange={inputChangeHandle}\n        name=\"text\"\n      />\n      <button\n        type=\"submit\"\n        className=\"button\"\n        onSubmit={saveNote}\n        disabled={!title}\n      >\n        Save\n      </button>\n    </form> \n  );\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const editNoteInLocalStorage = (\n  targetNoteId: number,\n  title: string,\n  text: string,\n) => {\n  const notes = getNotesFromLocalStorage();\n\n  if (notes) {\n    const preparedNote = {\n      id: targetNoteId,\n      title,\n      text,\n    };\n  \n    const targetNoteIndex = notes.findIndex(\n      ({ id }) => id === targetNoteId,\n    );\n  \n    const editedNotes = [...notes];\n\n    editedNotes.splice(\n      targetNoteIndex,\n      1,\n      preparedNote,\n    );\n\n    updateNotesInLocalStorage(editedNotes);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const addNoteToLocalStorage = (\n  title: string,\n  text: string,\n) => {\n  if (title || text) {\n    let notes: Note[] | null = getNotesFromLocalStorage();\n\n    if (!notes) {\n      notes = [];\n    }\n\n    const noteToPush = {\n      id: notes.length\n        ? notes[notes.length - 1].id + 1\n        : 0,\n      title: title || null,\n      text: text || null,\n    };\n\n    notes.push(noteToPush);\n\n    updateNotesInLocalStorage(notes);\n  }\n};\n","// react library constituents\nimport React, { useState, useEffect } from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\n// react components\nimport { Notes } from './components/Notes';\nimport { Edit } from './components/Edit';\n\n// helping functions\nimport { getNotesFromLocalStorage } from './data-processing/getNotesFromLocalStorage';\n\n// other\nimport './App.scss';\nimport { Note } from './typedefs/Note';\n\nexport const App: React.FC = () => {\n  const [notesFromLocalStorage, setNotes] = useState<Note[] | null>(null);\n  const [noteForEdit, setNoteForEdit] = useState<Note | null>(null);\n\n  useEffect(() => {\n    setNotes(getNotesFromLocalStorage());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <h1 className=\"App__title\">Notes</h1>\n          <Link to=\"/edit\">\n            New note\n          </Link>\n          <Notes\n            notes={notesFromLocalStorage}\n            listRerenderQuery={setNotes}\n            passNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <Route path=\"/edit\">\n          <Edit\n            listRerenderQuery={setNotes}\n            chosenNoteForEdit={noteForEdit}\n            cleanUpNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <p>Error — page is not exist</p>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}