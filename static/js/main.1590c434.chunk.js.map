{"version":3,"sources":["components/modals/Confirmation/ConfirmationModal.tsx","data-processing/getNotesFromLocalStorage.ts","data-processing/updateNotesInLocalStorage.ts","data-processing/deleteNote.tsx","data-processing/deleteNoteFromLocalStorage.ts","components/buttons/Delete/DeleteButton.tsx","components/Notes/Notes.tsx","components/Edit/Edit.tsx","data-processing/editNoteInLocalStorage.tsx","data-processing/addNoteToLocalStorage.ts","App.tsx","index.tsx"],"names":["ConfirmationModal","isOpen","changeModalRenderStatus","buttonName","functionOnConfirmation","noteForDeleteId","listReRenderQuery","cleanUpNoteForEdit","history","useHistory","ariaHideApp","shouldCloseOnEsc","onRequestClose","className","style","overlay","display","justifyContent","alignItems","content","transform","border","padding","margin","classNames","name","titleStart","titleSelect","type","onClick","push","getNotesFromLocalStorage","localStorageData","localStorage","getItem","JSON","parse","updateNotesInLocalStorage","data","setItem","stringify","deleteNote","setConfirmationModalRendered","targetId","notes","updatedNotes","filter","id","deleteNoteFromLocalStorage","DeleteButton","useState","ConfirmationModalRendered","setNoteForDeleteId","noteId","location","pathname","Notes","passNoteForEdit","map","note","title","text","editeNote","Edit","chosenNoteForEdit","initialNoteState","setInitialNoteState","setTitle","setText","onSaveModalRendered","setOnSaveModalRendered","onCancelModalRendered","setOnCancelModalRendered","useEffect","initialNote","inputChangeHandle","event","target","value","saveNote","targetNoteId","preparedNote","targetNoteIndex","findIndex","editedNotes","splice","editNoteInLocalStorage","noteToPush","length","addNoteToLocalStorage","placeholder","onChange","disabled","rows","App","notesFromLocalStorage","setNotes","noteForEdit","setNoteForEdit","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1590c434.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport ReactModal from 'react-modal';\nimport { useHistory } from 'react-router-dom';\n\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  isOpen: boolean,\n  changeModalRenderStatus: (par: boolean) => void,\n  buttonName: string,\n  functionOnConfirmation: (par?: any, par2?: any, par3?: any, par4?: any) => void,\n  noteForDeleteId?: number,\n  listReRenderQuery?: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n}\n\nexport const ConfirmationModal: React.FC<Props> = ({\n  isOpen,\n  changeModalRenderStatus,\n  buttonName,\n  functionOnConfirmation,\n  noteForDeleteId = -1,\n  listReRenderQuery,\n  cleanUpNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const handleClickOnYesButton = () => {\n    switch (buttonName) {\n      case 'delete': {\n        functionOnConfirmation(\n          noteForDeleteId,\n          changeModalRenderStatus,\n          listReRenderQuery,\n          cleanUpNoteForEdit,\n        );\n\n        history.push('/');\n\n        break;\n      }\n\n      case 'save':\n      case 'cancel': {\n        if (functionOnConfirmation) {\n          functionOnConfirmation();\n        }\n\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n\n  const titleSelect = (name: string): string => {\n    const titleStart = 'Are you sure want to';\n\n    switch (name) {\n      case 'delete':\n        return `${titleStart} delete this note?`;\n\n      case 'save':\n        return `${titleStart} save this note?`;\n\n      case 'cancel':\n        return `${titleStart} cancel editing?`;\n\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <ReactModal\n      isOpen={isOpen}\n      ariaHideApp={false}\n      shouldCloseOnEsc\n      onRequestClose={() => {\n        changeModalRenderStatus(false);\n      }}\n      className=\"card\"\n      style={{\n        overlay: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        },\n        content: {\n          transform: 'translateY(-100px)',\n          border: '2px solid #ccc',\n          padding: '30px',\n          margin: '24px',\n        },\n      }}\n    >\n      <h2\n        className={classNames(\n          'title',\n          'is-4',\n        )}\n      >\n        {titleSelect(buttonName)}\n      </h2>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={handleClickOnYesButton}\n          className={classNames(\n            'button',\n            'is-danger',\n          )}\n        >\n          Yes\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => changeModalRenderStatus(false)}\n          className={classNames(\n            'button',\n            'is-success',\n          )}\n        >\n          No\n        </button>\n      </div>\n    </ReactModal>\n  );\n};\n","import { Note } from '../typedefs/Note';\n\nexport const getNotesFromLocalStorage = (): Note[] | null => {\n  const localStorageData = localStorage.getItem('notes');\n\n  if (typeof localStorageData === 'string') {\n    return JSON.parse(localStorageData);\n  }\n\n  return localStorageData;\n};\n","import { Note } from '../typedefs/Note';\n\nexport const updateNotesInLocalStorage = (\n  data: Note[] | null,\n) => {\n  localStorage.setItem('notes', JSON.stringify(data));\n};\n","import { deleteNoteFromLocalStorage } from './deleteNoteFromLocalStorage';\nimport { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\n\ntype DeleteNote = (\n  id: number,\n  setConfirmationModalRendered: (par: boolean) => void,\n  listReRenderQuery?: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n) => void;\n\nexport const deleteNote: DeleteNote = (\n  noteForDeleteId,\n  setConfirmationModalRendered,\n  listReRenderQuery,\n  cleanUpNoteForEdit,\n) => {\n  deleteNoteFromLocalStorage(noteForDeleteId);\n  setConfirmationModalRendered(false);\n\n  if (listReRenderQuery) {\n    listReRenderQuery(getNotesFromLocalStorage());\n  }\n\n  if (cleanUpNoteForEdit) {\n    cleanUpNoteForEdit(null);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const deleteNoteFromLocalStorage = (targetId: number) => {\n  const notes = getNotesFromLocalStorage();\n  const updatedNotes = notes?.filter(\n    ({ id }) => id !== targetId,\n  );\n\n  updateNotesInLocalStorage(updatedNotes || null);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\n\nimport { ConfirmationModal } from '../../modals/Confirmation';\n\nimport { deleteNote } from '../../../data-processing/deleteNote';\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  id: number | null,\n  listReRenderQuery: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n}\n\nexport const DeleteButton: React.FC<Props> = ({\n  id,\n  listReRenderQuery,\n  cleanUpNoteForEdit,\n}) => {\n  const [ConfirmationModalRendered, setConfirmationModalRendered] = useState(false);\n  const [noteForDeleteId, setNoteForDeleteId] = useState(-1);\n\n  const history = useHistory();\n\n  const askForNoteDelete = (noteId: number | null) => {\n    if (noteId || noteId === 0) {\n      setNoteForDeleteId(noteId);\n      setConfirmationModalRendered(true);\n    }\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        name=\"delete\"\n        onClick={() => {\n          askForNoteDelete(id);\n        }}\n        className={classNames(\n          'button',\n          'is-danger',\n          { 'is-light': history.location.pathname !== '/edit' },\n          { 'is-outlined': history.location.pathname !== '/edit' },\n          { 'is-medium': history.location.pathname === '/edit' },\n        )}\n      >\n        Delete\n      </button>\n      <ConfirmationModal\n        isOpen={ConfirmationModalRendered}\n        changeModalRenderStatus={setConfirmationModalRendered}\n        buttonName=\"delete\"\n        functionOnConfirmation={deleteNote}\n        noteForDeleteId={noteForDeleteId}\n        listReRenderQuery={listReRenderQuery}\n        cleanUpNoteForEdit={cleanUpNoteForEdit}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { DeleteButton } from '../buttons/Delete';\n\nimport { Note } from '../../typedefs/Note';\n\ninterface Props {\n  notes: Note[] | null,\n  listReRenderQuery: (par: Note[] | null) => void,\n  passNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Notes: React.FC<Props> = ({\n  notes,\n  listReRenderQuery,\n  passNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const editeNote = (note: Note) => {\n    passNoteForEdit(note);\n    history.push('/edit');\n  };\n\n  return (\n    <ul className=\"section\">\n      {notes && notes.map((note) => (\n        <li className=\"block card\" key={note.id}>\n\n          <div className=\"card-content\">\n            <h3\n              className={classNames(\n                'title',\n                'is-4',\n              )}\n            >\n              {note.title}\n            </h3>\n            <p className=\"content\">\n              {note.text}\n            </p>\n          </div>\n\n          <div className={classNames(\n            'buttons',\n            'are-small',\n            'box',\n          )}\n          >\n            <button\n              type=\"button\"\n              onClick={() => {\n                editeNote(note);\n              }}\n              className={classNames(\n                'button',\n                'is-light',\n                'is-warning',\n                'is-outlined',\n              )}\n            >\n              Edit\n            </button>\n\n            <DeleteButton\n              id={note.id}\n              listReRenderQuery={listReRenderQuery}\n            />\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { ConfirmationModal } from '../modals/Confirmation';\n\nimport { addNoteToLocalStorage } from '../../data-processing/addNoteToLocalStorage';\nimport { editNoteInLocalStorage } from '../../data-processing/editNoteInLocalStorage';\nimport { getNotesFromLocalStorage } from '../../data-processing/getNotesFromLocalStorage';\n\nimport { Note } from '../../typedefs/Note';\nimport { DeleteButton } from '../buttons/Delete';\n\ninterface Props {\n  listReRenderQuery: (par: Note[] | null) => void,\n  chosenNoteForEdit: Note | null,\n  cleanUpNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Edit: React.FC<Props> = ({\n  listReRenderQuery,\n  chosenNoteForEdit,\n  cleanUpNoteForEdit,\n}) => {\n  const [initialNoteState, setInitialNoteState] = useState('');\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [onSaveModalRendered, setOnSaveModalRendered] = useState(false);\n  const [onCancelModalRendered, setOnCancelModalRendered] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    let initialNote = '';\n\n    if (chosenNoteForEdit?.title) {\n      setTitle(chosenNoteForEdit.title);\n      initialNote += chosenNoteForEdit.title;\n    }\n\n    if (chosenNoteForEdit?.text) {\n      setText(chosenNoteForEdit.text);\n      initialNote += chosenNoteForEdit.text;\n    }\n\n    setInitialNoteState(initialNote);\n  }, []);\n\n  const inputChangeHandle = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'title':\n        setTitle(event.target.value);\n        break;\n      case 'text':\n        setText(event.target.value);\n        break;\n      default:\n    }\n  };\n\n  const saveNote = () => {\n    if (chosenNoteForEdit) {\n      editNoteInLocalStorage(\n        chosenNoteForEdit.id,\n        title,\n        text,\n      );\n\n      cleanUpNoteForEdit(null);\n    } else {\n      addNoteToLocalStorage(title, text);\n    }\n\n    listReRenderQuery(getNotesFromLocalStorage());\n    history.push('/');\n  };\n\n  const handleClickOnSaveButton = () => {\n    if (chosenNoteForEdit) {\n      setOnSaveModalRendered(true);\n    } else {\n      saveNote();\n    }\n  };\n\n  const handleClickOnCancelButton = () => {\n    if (title + text === initialNoteState) {\n      cleanUpNoteForEdit(null);\n      history.push('/');\n    }\n\n    setOnCancelModalRendered(true);\n  };\n\n  const cancelEditing = () => {\n    cleanUpNoteForEdit(null);\n    history.push('/');\n  };\n\n  return (\n    <div className=\"box section\">\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={inputChangeHandle}\n          name=\"title\"\n          className=\"input is-medium\"\n        />\n      </div>\n      <div className=\"field\">\n        <textarea\n          placeholder=\"Text\"\n          value={text}\n          onChange={inputChangeHandle}\n          name=\"text\"\n          className=\"textarea block is-medium\"\n          disabled={!title}\n          rows={8}\n        />\n      </div>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          name=\"name\"\n          className=\"button is-success is-medium\"\n          onClick={handleClickOnSaveButton}\n          disabled={!title || !(initialNoteState !== title + text)}\n        >\n          Save\n        </button>\n        <ConfirmationModal\n          isOpen={onSaveModalRendered}\n          changeModalRenderStatus={setOnSaveModalRendered}\n          buttonName=\"save\"\n          functionOnConfirmation={saveNote}\n        />\n        <button\n          type=\"button\"\n          name=\"name\"\n          className={classNames(\n            'button',\n            'is-warning',\n            'is-medium',\n          )}\n          onClick={handleClickOnCancelButton}\n        >\n          Cancel\n        </button>\n        <ConfirmationModal\n          isOpen={onCancelModalRendered}\n          changeModalRenderStatus={setOnCancelModalRendered}\n          buttonName=\"cancel\"\n          functionOnConfirmation={cancelEditing}\n        />\n        {chosenNoteForEdit && (\n          <DeleteButton\n            id={chosenNoteForEdit.id}\n            listReRenderQuery={listReRenderQuery}\n            cleanUpNoteForEdit={cleanUpNoteForEdit}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const editNoteInLocalStorage = (\n  targetNoteId: number,\n  title: string,\n  text: string,\n) => {\n  const notes = getNotesFromLocalStorage();\n\n  if (notes) {\n    const preparedNote = {\n      id: targetNoteId,\n      title,\n      text,\n    };\n\n    const targetNoteIndex = notes.findIndex(\n      ({ id }) => id === targetNoteId,\n    );\n\n    const editedNotes = [...notes];\n\n    editedNotes.splice(\n      targetNoteIndex,\n      1,\n      preparedNote,\n    );\n\n    updateNotesInLocalStorage(editedNotes);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const addNoteToLocalStorage = (\n  title: string,\n  text: string,\n) => {\n  if (title || text) {\n    let notes: Note[] | null = getNotesFromLocalStorage();\n\n    if (!notes) {\n      notes = [];\n    }\n\n    const noteToPush = {\n      id: notes.length\n        ? notes[notes.length - 1].id + 1\n        : 0,\n      title: title || null,\n      text: text || null,\n    };\n\n    notes.push(noteToPush);\n\n    updateNotesInLocalStorage(notes);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { Notes } from './components/Notes';\nimport { Edit } from './components/Edit';\n\nimport { getNotesFromLocalStorage } from './data-processing/getNotesFromLocalStorage';\n\nimport { Note } from './typedefs/Note';\n\nimport 'bulma/css/bulma.min.css';\n\nexport const App: React.FC = () => {\n  const [notesFromLocalStorage, setNotes] = useState<Note[] | null>(null);\n  const [noteForEdit, setNoteForEdit] = useState<Note | null>(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    setNotes(getNotesFromLocalStorage());\n  }, []);\n\n  const handleNewNoteButtonClick = () => {\n    setNoteForEdit(null);\n    history.push('/edit');\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact>\n        <div className=\"level box section\">\n          <h1\n            className={classNames(\n              'title',\n              'is-1',\n              'level-item',\n            )}\n          >\n            Notes\n          </h1>\n          <button\n            type=\"button\"\n            onClick={handleNewNoteButtonClick}\n            className={classNames(\n              'button',\n              'is-success',\n              'is-medium',\n              'level-item',\n            )}\n          >\n            New note\n          </button>\n        </div>\n\n        <Notes\n          notes={notesFromLocalStorage}\n          listReRenderQuery={setNotes}\n          passNoteForEdit={setNoteForEdit}\n        />\n      </Route>\n\n      <Route path=\"/edit\">\n        <Edit\n          listReRenderQuery={setNotes}\n          chosenNoteForEdit={noteForEdit}\n          cleanUpNoteForEdit={setNoteForEdit}\n        />\n      </Route>\n\n      <p>Error — page is not exist</p>\n    </Switch>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}