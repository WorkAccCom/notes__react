{"version":3,"sources":["data-processing/getNotesFromLocalStorage.ts","data-processing/updateNotesInLocalStorage.ts","data-processing/deleteNote.tsx","data-processing/deleteNoteFromLocalStorage.ts","components/modals/Delete/DeleteNoteModal.tsx","components/buttons/Delete/DeleteButton.tsx","components/Notes/Notes.tsx","components/Edit/Edit.tsx","data-processing/editNoteInLocalStorage.tsx","data-processing/addNoteToLocalStorage.ts","App.tsx","index.tsx"],"names":["getNotesFromLocalStorage","localStorageData","localStorage","getItem","JSON","parse","updateNotesInLocalStorage","data","setItem","stringify","deleteNote","noteForDeleteId","setDeleteNoteModalRendered","listRerenderQuery","targetId","notes","updatedNotes","filter","id","deleteNoteFromLocalStorage","DeleteNoteModal","isOpen","changeModalRenderStatus","history","useHistory","ariaHideApp","shouldCloseOnEsc","onRequestClose","type","onClick","push","DeleteButton","useState","deleteNoteModalRendered","setNoteForDeleteId","noteId","className","Notes","passNoteForEdit","map","note","title","text","editeNote","Edit","chosenNoteForEdit","cleanUpNoteForEdit","setTitle","setText","redirect","setRedirect","useEffect","inputChangeHandle","event","target","name","value","saveNote","preventDefault","targetNoteId","preparedNote","targetNoteIndex","findIndex","editedNotes","splice","editNoteInLocalStorage","noteToPush","length","addNoteToLocalStorage","action","onSubmit","to","placeholder","onChange","disabled","App","notesFromLocalStorage","setNotes","noteForEdit","setNoteForEdit","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41818da8.chunk.js","sourcesContent":["import { Note } from '../typedefs/Note';\n\nexport const getNotesFromLocalStorage = (): Note[] | null => {\n  const localStorageData = localStorage.getItem('notes');\n\n  if (typeof localStorageData === 'string') {\n    return JSON.parse(localStorageData);\n  }\n\n  return localStorageData;\n};\n","import { Note } from '../typedefs/Note';\n\nexport const updateNotesInLocalStorage = (\n  data: Note[] | null,\n) => {\n  localStorage.setItem('notes', JSON.stringify(data));\n};\n","import { deleteNoteFromLocalStorage } from './deleteNoteFromLocalStorage';\nimport { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\n\ntype DeleteNote = (\n  id: number,\n  setDeleteNoteModalRendered: (par: boolean) => void,\n  listRerenderQuery: (par: Note[] | null) => void,\n) => void;\n\nexport const deleteNote: DeleteNote = (\n  noteForDeleteId,\n  setDeleteNoteModalRendered,\n  listRerenderQuery,\n) => {\n  deleteNoteFromLocalStorage(noteForDeleteId);\n  setDeleteNoteModalRendered(false);\n  listRerenderQuery(getNotesFromLocalStorage());\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const deleteNoteFromLocalStorage = (targetId: number) => {\n  const notes = getNotesFromLocalStorage();\n  const updatedNotes = notes?.filter(\n    ({ id }) => id !== targetId,\n  );\n\n  updateNotesInLocalStorage(updatedNotes || null);\n};\n","import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useHistory } from 'react-router-dom';\n\nimport { deleteNote } from '../../../data-processing/deleteNote';\n\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  isOpen: boolean,\n  changeModalRenderStatus: (par: boolean) => void,\n  noteForDeleteId: number,\n  listRerenderQuery: (par: Note[] | null) => void,\n}\n\nexport const DeleteNoteModal: React.FC<Props> = ({\n  isOpen,\n  changeModalRenderStatus,\n  noteForDeleteId,\n  listRerenderQuery,\n}) => {\n  const history = useHistory();\n\n  const handleClickOnYesButton = () => {\n    deleteNote(\n      noteForDeleteId,\n      changeModalRenderStatus,\n      listRerenderQuery,\n    );\n\n    history.push('/');\n  };\n\n  return (\n    <ReactModal\n      isOpen={isOpen}\n      ariaHideApp={false}\n      shouldCloseOnEsc\n      onRequestClose={() => {\n        changeModalRenderStatus(false);\n      }}\n    >\n      <h2>Are you sure want to delete this note?</h2>\n      <button\n        type=\"button\"\n        onClick={handleClickOnYesButton}\n      >\n        Yes\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => changeModalRenderStatus(false)}\n      >\n        No\n      </button>\n    </ReactModal>\n  );\n};\n","import React, { useState } from 'react';\nimport { DeleteNoteModal } from '../../modals/Delete';\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  id: number | null,\n  listRerenderQuery: (par: Note[] | null) => void,\n}\n\nexport const DeleteButton: React.FC<Props> = ({\n  id,\n  listRerenderQuery,\n}) => {\n  const [deleteNoteModalRendered, setDeleteNoteModalRendered] = useState(false);\n  const [noteForDeleteId, setNoteForDeleteId] = useState(-1);\n\n  const askForNoteDelete = (noteId: number | null) => {\n    if (noteId || noteId === 0) {\n      setDeleteNoteModalRendered(true);\n      setNoteForDeleteId(noteId);\n    }\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          askForNoteDelete(id);\n        }}\n        className=\"Notes__note-delete\"\n      >\n        Delete\n      </button>\n      <DeleteNoteModal\n        isOpen={deleteNoteModalRendered}\n        changeModalRenderStatus={setDeleteNoteModalRendered}\n        noteForDeleteId={noteForDeleteId}\n        listRerenderQuery={listRerenderQuery}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Redirect, Route, useHistory } from 'react-router-dom';\n\nimport { DeleteButton } from '../buttons/Delete';\n\nimport { Note } from '../../typedefs/Note';\n\nimport './Notes.scss';\n\ninterface Props {\n  notes: Note[] | null,\n  listRerenderQuery: (par: Note[] | null) => void,\n  passNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Notes: React.FC<Props> = ({\n  notes,\n  listRerenderQuery,\n  passNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const editeNote = (note: Note) => {\n    passNoteForEdit(note);\n    history.push('/edit');\n  };\n\n  return (\n    <ul className=\"Notes\">\n      {notes && notes.map((note) => (\n        <li className=\"Notes__note\" key={note.id}>\n          \n          <h3 className=\"Notes__note-title\">\n            {note.title}\n          </h3>\n          <p className=\"Notes__note-text\">\n            {note.text}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              editeNote(note);\n            }}\n            className=\"Notes__note-edit\"\n          >\n            Edit\n          </button>\n\n          <DeleteButton\n            id={note.id}\n            listRerenderQuery={listRerenderQuery}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { DeleteNoteModal } from '../modals/Delete';\n\nimport { addNoteToLocalStorage } from '../../data-processing/addNoteToLocalStorage';\nimport { editNoteInLocalStorage } from '../../data-processing/editNoteInLocalStorage';\nimport { getNotesFromLocalStorage } from '../../data-processing/getNotesFromLocalStorage';\n\nimport { Note } from '../../typedefs/Note';\nimport { DeleteButton } from '../buttons/Delete';\n\ninterface Props {\n  listRerenderQuery: (par: Note[] | null) => void,\n  chosenNoteForEdit: Note | null,\n  cleanUpNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Edit: React.FC<Props> = ({\n  listRerenderQuery,\n  chosenNoteForEdit,\n  cleanUpNoteForEdit,\n}) => {\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [redirect, setRedirect] = useState(false);\n\n  useEffect(() => {\n    if (chosenNoteForEdit?.title) {\n      setTitle(chosenNoteForEdit.title);\n    }\n\n    if (chosenNoteForEdit?.text) {\n      setText(chosenNoteForEdit.text);\n    }\n  }, []);\n\n  const inputChangeHandle = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'title':\n        setTitle(event.target.value);\n        break;\n      case 'text':\n        setText(event.target.value);\n        break;\n      default:\n    }\n  };\n\n  const saveNote = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (chosenNoteForEdit) {\n      editNoteInLocalStorage(\n        chosenNoteForEdit.id,\n        title,\n        text,\n      );\n      setTitle('');\n      setText('');\n      cleanUpNoteForEdit(null);\n    } else {\n      addNoteToLocalStorage(title, text);\n    }\n\n    listRerenderQuery(getNotesFromLocalStorage());\n    setRedirect(true);\n  };\n\n  return (\n    <form\n      action=\"\"\n      onSubmit={saveNote}\n    >\n      {redirect && <Redirect to=\"/\" />}\n\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={title}\n        onChange={inputChangeHandle}\n        name=\"title\"\n      />\n      <textarea\n        placeholder=\"Text\"\n        value={text}\n        onChange={inputChangeHandle}\n        name=\"text\"\n      />\n      <button\n        type=\"submit\"\n        className=\"button\"\n        onSubmit={saveNote}\n        disabled={!title}\n      >\n        Save\n      </button>\n\n      <DeleteButton\n        id={chosenNoteForEdit?.id || null}\n        listRerenderQuery={listRerenderQuery}\n      />\n    </form> \n  );\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const editNoteInLocalStorage = (\n  targetNoteId: number,\n  title: string,\n  text: string,\n) => {\n  const notes = getNotesFromLocalStorage();\n\n  if (notes) {\n    const preparedNote = {\n      id: targetNoteId,\n      title,\n      text,\n    };\n  \n    const targetNoteIndex = notes.findIndex(\n      ({ id }) => id === targetNoteId,\n    );\n  \n    const editedNotes = [...notes];\n\n    editedNotes.splice(\n      targetNoteIndex,\n      1,\n      preparedNote,\n    );\n\n    updateNotesInLocalStorage(editedNotes);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const addNoteToLocalStorage = (\n  title: string,\n  text: string,\n) => {\n  if (title || text) {\n    let notes: Note[] | null = getNotesFromLocalStorage();\n\n    if (!notes) {\n      notes = [];\n    }\n\n    const noteToPush = {\n      id: notes.length\n        ? notes[notes.length - 1].id + 1\n        : 0,\n      title: title || null,\n      text: text || null,\n    };\n\n    notes.push(noteToPush);\n\n    updateNotesInLocalStorage(notes);\n  }\n};\n","// react library constituents\nimport React, { useState, useEffect } from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\n// react components\nimport { Notes } from './components/Notes';\nimport { Edit } from './components/Edit';\n\n// helping functions\nimport { getNotesFromLocalStorage } from './data-processing/getNotesFromLocalStorage';\n\n// other\nimport './App.scss';\nimport { Note } from './typedefs/Note';\n\nexport const App: React.FC = () => {\n  const [notesFromLocalStorage, setNotes] = useState<Note[] | null>(null);\n  const [noteForEdit, setNoteForEdit] = useState<Note | null>(null);\n\n  useEffect(() => {\n    setNotes(getNotesFromLocalStorage());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <h1 className=\"App__title\">Notes</h1>\n          <Link to=\"/edit\">\n            New note\n          </Link>\n          <Notes\n            notes={notesFromLocalStorage}\n            listRerenderQuery={setNotes}\n            passNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <Route path=\"/edit\">\n          <Edit\n            listRerenderQuery={setNotes}\n            chosenNoteForEdit={noteForEdit}\n            cleanUpNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <p>Error — page is not exist</p>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}