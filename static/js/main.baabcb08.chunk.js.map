{"version":3,"sources":["components/modals/Confirmation/ConfirmationModal.tsx","data-processing/getNotesFromLocalStorage.ts","data-processing/updateNotesInLocalStorage.ts","data-processing/deleteNote.tsx","data-processing/deleteNoteFromLocalStorage.ts","components/buttons/Delete/DeleteButton.tsx","components/Notes/Notes.tsx","components/Edit/Edit.tsx","data-processing/editNoteInLocalStorage.tsx","data-processing/addNoteToLocalStorage.ts","App.tsx","index.tsx"],"names":["ConfirmationModal","isOpen","changeModalRenderStatus","buttonName","functionOnConfirmation","noteForDeleteId","listReRenderQuery","cleanUpNoteForEdit","history","useHistory","ariaHideApp","shouldCloseOnEsc","onRequestClose","style","content","top","left","right","bottom","border","padding","className","classNames","name","titleStart","titleSelect","type","onClick","push","getNotesFromLocalStorage","localStorageData","localStorage","getItem","JSON","parse","updateNotesInLocalStorage","data","setItem","stringify","deleteNote","setConfirmationModalRendered","targetId","notes","updatedNotes","filter","id","deleteNoteFromLocalStorage","DeleteButton","useState","ConfirmationModalRendered","setNoteForDeleteId","noteId","location","pathname","Notes","passNoteForEdit","map","note","title","text","editeNote","Edit","chosenNoteForEdit","initialNoteState","setInitialNoteState","setTitle","setText","onSaveModalRendered","setOnSaveModalRendered","onCancelModalRendered","setOnCancelModalRendered","useEffect","initialNote","inputChangeHandle","event","target","value","placeholder","onChange","disabled","rows","targetNoteId","preparedNote","targetNoteIndex","findIndex","editedNotes","splice","editNoteInLocalStorage","noteToPush","length","addNoteToLocalStorage","App","notesFromLocalStorage","setNotes","noteForEdit","setNoteForEdit","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baabcb08.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport ReactModal from 'react-modal';\nimport { useHistory } from 'react-router-dom';\n\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  isOpen: boolean,\n  changeModalRenderStatus: (par: boolean) => void,\n  buttonName: string,\n  functionOnConfirmation: (par?: any, par2?: any, par3?: any, par4?: any) => void,\n  noteForDeleteId?: number,\n  listReRenderQuery?: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n}\n\nexport const ConfirmationModal: React.FC<Props> = ({\n  isOpen,\n  changeModalRenderStatus,\n  buttonName,\n  functionOnConfirmation,\n  noteForDeleteId = -1,\n  listReRenderQuery,\n  cleanUpNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const handleClickOnYesButton = () => {\n    switch (buttonName) {\n      case 'delete': {\n        functionOnConfirmation(\n          noteForDeleteId,\n          changeModalRenderStatus,\n          listReRenderQuery,\n          cleanUpNoteForEdit,\n        );\n\n        history.push('/');\n\n        break;\n      }\n\n      case 'save':\n      case 'cancel': {\n        if (functionOnConfirmation) {\n          functionOnConfirmation();\n        }\n\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n\n  const titleSelect = (name: string): string => {\n    const titleStart = 'Are you sure want to';\n\n    switch (name) {\n      case 'delete':\n        return `${titleStart} delete this note?`;\n\n      case 'save':\n        return `${titleStart} save this note?`;\n\n      case 'cancel':\n        return `${titleStart} cancel editing?`;\n\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <ReactModal\n      isOpen={isOpen}\n      ariaHideApp={false}\n      shouldCloseOnEsc\n      onRequestClose={() => {\n        changeModalRenderStatus(false);\n      }}\n      style={{\n        content: {\n          top: '100px',\n          left: '380px',\n          right: '380px',\n          bottom: '450px',\n          border: '2px solid #ccc',\n          padding: '30px',\n        },\n      }}\n    >\n      <h2\n        className={classNames(\n          'title',\n          'is-4',\n        )}\n      >\n        {titleSelect(buttonName)}\n      </h2>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={handleClickOnYesButton}\n          className={classNames(\n            'button',\n            'is-danger',\n          )}\n        >\n          Yes\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => changeModalRenderStatus(false)}\n          className={classNames(\n            'button',\n            'is-success',\n          )}\n        >\n          No\n        </button>\n      </div>\n    </ReactModal>\n  );\n};\n","import { Note } from '../typedefs/Note';\n\nexport const getNotesFromLocalStorage = (): Note[] | null => {\n  const localStorageData = localStorage.getItem('notes');\n\n  if (typeof localStorageData === 'string') {\n    return JSON.parse(localStorageData);\n  }\n\n  return localStorageData;\n};\n","import { Note } from '../typedefs/Note';\n\nexport const updateNotesInLocalStorage = (\n  data: Note[] | null,\n) => {\n  localStorage.setItem('notes', JSON.stringify(data));\n};\n","import { deleteNoteFromLocalStorage } from './deleteNoteFromLocalStorage';\nimport { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\n\ntype DeleteNote = (\n  id: number,\n  setConfirmationModalRendered: (par: boolean) => void,\n  listReRenderQuery?: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n) => void;\n\nexport const deleteNote: DeleteNote = (\n  noteForDeleteId,\n  setConfirmationModalRendered,\n  listReRenderQuery,\n  cleanUpNoteForEdit,\n) => {\n  deleteNoteFromLocalStorage(noteForDeleteId);\n  setConfirmationModalRendered(false);\n\n  if (listReRenderQuery) {\n    listReRenderQuery(getNotesFromLocalStorage());\n  }\n\n  if (cleanUpNoteForEdit) {\n    cleanUpNoteForEdit(null);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const deleteNoteFromLocalStorage = (targetId: number) => {\n  const notes = getNotesFromLocalStorage();\n  const updatedNotes = notes?.filter(\n    ({ id }) => id !== targetId,\n  );\n\n  updateNotesInLocalStorage(updatedNotes || null);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\n\nimport { ConfirmationModal } from '../../modals/Confirmation';\n\nimport { deleteNote } from '../../../data-processing/deleteNote';\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  id: number | null,\n  listReRenderQuery: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n}\n\nexport const DeleteButton: React.FC<Props> = ({\n  id,\n  listReRenderQuery,\n  cleanUpNoteForEdit,\n}) => {\n  const [ConfirmationModalRendered, setConfirmationModalRendered] = useState(false);\n  const [noteForDeleteId, setNoteForDeleteId] = useState(-1);\n\n  const history = useHistory();\n\n  const askForNoteDelete = (noteId: number | null) => {\n    if (noteId || noteId === 0) {\n      setNoteForDeleteId(noteId);\n      setConfirmationModalRendered(true);\n    }\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        name=\"delete\"\n        onClick={() => {\n          askForNoteDelete(id);\n        }}\n        className={classNames(\n          'button',\n          'is-danger',\n          { 'is-light': history.location.pathname !== '/edit' },\n          { 'is-outlined': history.location.pathname !== '/edit' },\n          { 'is-medium': history.location.pathname === '/edit' },\n        )}\n      >\n        Delete\n      </button>\n      <ConfirmationModal\n        isOpen={ConfirmationModalRendered}\n        changeModalRenderStatus={setConfirmationModalRendered}\n        buttonName=\"delete\"\n        functionOnConfirmation={deleteNote}\n        noteForDeleteId={noteForDeleteId}\n        listReRenderQuery={listReRenderQuery}\n        cleanUpNoteForEdit={cleanUpNoteForEdit}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { DeleteButton } from '../buttons/Delete';\n\nimport { Note } from '../../typedefs/Note';\n\ninterface Props {\n  notes: Note[] | null,\n  listReRenderQuery: (par: Note[] | null) => void,\n  passNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Notes: React.FC<Props> = ({\n  notes,\n  listReRenderQuery,\n  passNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const editeNote = (note: Note) => {\n    passNoteForEdit(note);\n    history.push('/edit');\n  };\n\n  return (\n    <ul className=\"section\">\n      {notes && notes.map((note) => (\n        <li className=\"block card\" key={note.id}>\n\n          <div className=\"card-content\">\n            <h3\n              className={classNames(\n                'title',\n                'is-4',\n              )}\n            >\n              {note.title}\n            </h3>\n            <p className=\"content\">\n              {note.text}\n            </p>\n          </div>\n\n          <div className={classNames(\n            'buttons',\n            'are-small',\n            'box',\n          )}\n          >\n            <button\n              type=\"button\"\n              onClick={() => {\n                editeNote(note);\n              }}\n              className={classNames(\n                'button',\n                'is-light',\n                'is-warning',\n                'is-outlined',\n              )}\n            >\n              Edit\n            </button>\n\n            <DeleteButton\n              id={note.id}\n              listReRenderQuery={listReRenderQuery}\n            />\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { ConfirmationModal } from '../modals/Confirmation';\n\nimport { addNoteToLocalStorage } from '../../data-processing/addNoteToLocalStorage';\nimport { editNoteInLocalStorage } from '../../data-processing/editNoteInLocalStorage';\nimport { getNotesFromLocalStorage } from '../../data-processing/getNotesFromLocalStorage';\n\nimport { Note } from '../../typedefs/Note';\nimport { DeleteButton } from '../buttons/Delete';\n\ninterface Props {\n  listReRenderQuery: (par: Note[] | null) => void,\n  chosenNoteForEdit: Note | null,\n  cleanUpNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Edit: React.FC<Props> = ({\n  listReRenderQuery,\n  chosenNoteForEdit,\n  cleanUpNoteForEdit,\n}) => {\n  const [initialNoteState, setInitialNoteState] = useState('');\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [onSaveModalRendered, setOnSaveModalRendered] = useState(false);\n  const [onCancelModalRendered, setOnCancelModalRendered] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    let initialNote = '';\n\n    if (chosenNoteForEdit?.title) {\n      setTitle(chosenNoteForEdit.title);\n      initialNote += chosenNoteForEdit.title;\n    }\n\n    if (chosenNoteForEdit?.text) {\n      setText(chosenNoteForEdit.text);\n      initialNote += chosenNoteForEdit.text;\n    }\n\n    setInitialNoteState(initialNote);\n  }, []);\n\n  const inputChangeHandle = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'title':\n        setTitle(event.target.value);\n        break;\n      case 'text':\n        setText(event.target.value);\n        break;\n      default:\n    }\n  };\n\n  const handleClickOnSaveButton = () => {\n    setOnSaveModalRendered(true);\n  };\n\n  const saveNote = () => {\n    if (chosenNoteForEdit) {\n      editNoteInLocalStorage(\n        chosenNoteForEdit.id,\n        title,\n        text,\n      );\n\n      cleanUpNoteForEdit(null);\n    } else {\n      addNoteToLocalStorage(title, text);\n    }\n\n    listReRenderQuery(getNotesFromLocalStorage());\n    history.push('/');\n  };\n\n  const handleClickOnCancelButton = () => {\n    if (title + text === initialNoteState) {\n      cleanUpNoteForEdit(null);\n      history.push('/');\n    }\n\n    setOnCancelModalRendered(true);\n  };\n\n  const cancelEditing = () => {\n    cleanUpNoteForEdit(null);\n    history.push('/');\n  };\n\n  return (\n    <div className=\"box section\">\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={inputChangeHandle}\n          name=\"title\"\n          className=\"input is-medium\"\n        />\n      </div>\n      <div className=\"field\">\n        <textarea\n          placeholder=\"Text\"\n          value={text}\n          onChange={inputChangeHandle}\n          name=\"text\"\n          className=\"textarea block is-medium\"\n          disabled={!title}\n          rows={8}\n        />\n      </div>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          name=\"name\"\n          className=\"button is-success is-medium\"\n          onClick={handleClickOnSaveButton}\n          disabled={!title || !(initialNoteState !== title + text)}\n        >\n          Save\n        </button>\n        <ConfirmationModal\n          isOpen={onSaveModalRendered}\n          changeModalRenderStatus={setOnSaveModalRendered}\n          buttonName=\"save\"\n          functionOnConfirmation={saveNote}\n        />\n        <button\n          type=\"button\"\n          name=\"name\"\n          className={classNames(\n            'button',\n            'is-warning',\n            'is-medium',\n          )}\n          onClick={handleClickOnCancelButton}\n        >\n          Cancel\n        </button>\n        <ConfirmationModal\n          isOpen={onCancelModalRendered}\n          changeModalRenderStatus={setOnCancelModalRendered}\n          buttonName=\"cancel\"\n          functionOnConfirmation={cancelEditing}\n        />\n        {chosenNoteForEdit && (\n          <DeleteButton\n            id={chosenNoteForEdit.id}\n            listReRenderQuery={listReRenderQuery}\n            cleanUpNoteForEdit={cleanUpNoteForEdit}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const editNoteInLocalStorage = (\n  targetNoteId: number,\n  title: string,\n  text: string,\n) => {\n  const notes = getNotesFromLocalStorage();\n\n  if (notes) {\n    const preparedNote = {\n      id: targetNoteId,\n      title,\n      text,\n    };\n\n    const targetNoteIndex = notes.findIndex(\n      ({ id }) => id === targetNoteId,\n    );\n\n    const editedNotes = [...notes];\n\n    editedNotes.splice(\n      targetNoteIndex,\n      1,\n      preparedNote,\n    );\n\n    updateNotesInLocalStorage(editedNotes);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const addNoteToLocalStorage = (\n  title: string,\n  text: string,\n) => {\n  if (title || text) {\n    let notes: Note[] | null = getNotesFromLocalStorage();\n\n    if (!notes) {\n      notes = [];\n    }\n\n    const noteToPush = {\n      id: notes.length\n        ? notes[notes.length - 1].id + 1\n        : 0,\n      title: title || null,\n      text: text || null,\n    };\n\n    notes.push(noteToPush);\n\n    updateNotesInLocalStorage(notes);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { Route, Switch, useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport { Notes } from './components/Notes';\nimport { Edit } from './components/Edit';\n\nimport { getNotesFromLocalStorage } from './data-processing/getNotesFromLocalStorage';\n\nimport { Note } from './typedefs/Note';\n\nimport 'bulma/css/bulma.min.css';\n\nexport const App: React.FC = () => {\n  const [notesFromLocalStorage, setNotes] = useState<Note[] | null>(null);\n  const [noteForEdit, setNoteForEdit] = useState<Note | null>(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    setNotes(getNotesFromLocalStorage());\n  }, []);\n\n  const handleNewNoteButtonClick = () => {\n    setNoteForEdit(null);\n    history.push('/edit');\n  };\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" exact>\n          <div className=\"level box section\">\n            <h1\n              className={classNames(\n                'title',\n                'is-1',\n                'level-item',\n              )}\n            >\n              Notes\n            </h1>\n            <button\n              type=\"button\"\n              onClick={handleNewNoteButtonClick}\n              className={classNames(\n                'button',\n                'is-success',\n                'is-medium',\n                'level-item',\n              )}\n            >\n              New note\n            </button>\n          </div>\n\n          <Notes\n            notes={notesFromLocalStorage}\n            listReRenderQuery={setNotes}\n            passNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <Route path=\"/edit\">\n          <Edit\n            listReRenderQuery={setNotes}\n            chosenNoteForEdit={noteForEdit}\n            cleanUpNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <p>Error — page is not exist</p>\n      </Switch>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}