{"version":3,"sources":["components/modals/Confirmation/ConfirmationModal.tsx","data-processing/getNotesFromLocalStorage.ts","data-processing/updateNotesInLocalStorage.ts","data-processing/deleteNote.tsx","data-processing/deleteNoteFromLocalStorage.ts","components/buttons/Delete/DeleteButton.tsx","components/Notes/Notes.tsx","components/Edit/Edit.tsx","data-processing/editNoteInLocalStorage.tsx","data-processing/addNoteToLocalStorage.ts","App.tsx","index.tsx"],"names":["ConfirmationModal","isOpen","changeModalRenderStatus","buttonName","functionOnConfirmation","noteForDeleteId","listRerenderQuery","cleanUpNoteForEdit","history","useHistory","ariaHideApp","shouldCloseOnEsc","onRequestClose","name","titleStart","titleSelect","type","onClick","push","getNotesFromLocalStorage","localStorageData","localStorage","getItem","JSON","parse","updateNotesInLocalStorage","data","setItem","stringify","deleteNote","setConfirmationModalRendered","targetId","notes","updatedNotes","filter","id","deleteNoteFromLocalStorage","DeleteButton","useState","ConfirmationModalRendered","setNoteForDeleteId","noteId","className","Notes","passNoteForEdit","map","note","title","text","editeNote","Edit","chosenNoteForEdit","initialNoteState","setInitialNoteState","setTitle","setText","onSaveModalRendered","setOnSaveModalRendered","onCancelModalRendered","setOnCancelModalRendered","useEffect","initialNote","console","log","inputChangeHandle","event","target","value","placeholder","onChange","disabled","targetNoteId","preparedNote","targetNoteIndex","findIndex","editedNotes","splice","editNoteInLocalStorage","noteToPush","length","addNoteToLocalStorage","App","notesFromLocalStorage","setNotes","noteForEdit","setNoteForEdit","path","exact","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1386b5e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactModal from 'react-modal';\nimport { useHistory } from 'react-router-dom';\n\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  isOpen: boolean,\n  changeModalRenderStatus: (par: boolean) => void,\n  buttonName: string,\n  functionOnConfirmation: (par?: any, par2?: any, par3?: any, par4?: any) => void,\n  noteForDeleteId?: number,\n  listRerenderQuery?: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n}\n\nexport const ConfirmationModal: React.FC<Props> = ({\n  isOpen,\n  changeModalRenderStatus,\n  buttonName,\n  functionOnConfirmation,\n  noteForDeleteId = -1,\n  listRerenderQuery,\n  cleanUpNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const handleClickOnYesButton = () => {\n    switch (buttonName) {\n      case 'delete': {\n        functionOnConfirmation(\n          noteForDeleteId,\n          changeModalRenderStatus,\n          listRerenderQuery,\n          cleanUpNoteForEdit,\n        );\n\n        history.push('/');\n\n        break;\n      }\n\n      case 'save':\n      case 'cancel': {\n        if (functionOnConfirmation) {\n          functionOnConfirmation();\n        }\n\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n\n  const titleSelect = (name: string): string => {\n    const titleStart = 'Are you sure want to';\n\n    switch (name) {\n      case 'delete':\n        return `${titleStart} delete this note?`;\n\n      case 'save':\n        return `${titleStart} save this note?`;\n\n      case 'cancel':\n        return `${titleStart} cancel editing?`;\n\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <ReactModal\n      isOpen={isOpen}\n      ariaHideApp={false}\n      shouldCloseOnEsc\n      onRequestClose={() => {\n        changeModalRenderStatus(false);\n      }}\n    >\n      <h2>{titleSelect(buttonName)}</h2>\n      <button\n        type=\"button\"\n        onClick={handleClickOnYesButton}\n      >\n        Yes\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => changeModalRenderStatus(false)}\n      >\n        No\n      </button>\n    </ReactModal>\n  );\n};\n","import { Note } from '../typedefs/Note';\n\nexport const getNotesFromLocalStorage = (): Note[] | null => {\n  const localStorageData = localStorage.getItem('notes');\n\n  if (typeof localStorageData === 'string') {\n    return JSON.parse(localStorageData);\n  }\n\n  return localStorageData;\n};\n","import { Note } from '../typedefs/Note';\n\nexport const updateNotesInLocalStorage = (\n  data: Note[] | null,\n) => {\n  localStorage.setItem('notes', JSON.stringify(data));\n};\n","import { deleteNoteFromLocalStorage } from './deleteNoteFromLocalStorage';\nimport { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\n\ntype DeleteNote = (\n  id: number,\n  setConfirmationModalRendered: (par: boolean) => void,\n  listRerenderQuery?: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n) => void;\n\nexport const deleteNote: DeleteNote = (\n  noteForDeleteId,\n  setConfirmationModalRendered,\n  listRerenderQuery,\n  cleanUpNoteForEdit,\n) => {\n  deleteNoteFromLocalStorage(noteForDeleteId);\n  setConfirmationModalRendered(false);\n\n  if (listRerenderQuery && cleanUpNoteForEdit) {\n    listRerenderQuery(getNotesFromLocalStorage());\n    cleanUpNoteForEdit(null);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const deleteNoteFromLocalStorage = (targetId: number) => {\n  const notes = getNotesFromLocalStorage();\n  const updatedNotes = notes?.filter(\n    ({ id }) => id !== targetId,\n  );\n\n  updateNotesInLocalStorage(updatedNotes || null);\n};\n","import React, { useState } from 'react';\nimport { ConfirmationModal } from '../../modals/Confirmation';\nimport { deleteNote } from '../../../data-processing/deleteNote';\nimport { Note } from '../../../typedefs/Note';\n\ninterface Props {\n  id: number | null,\n  listRerenderQuery: (par: Note[] | null) => void,\n  cleanUpNoteForEdit?: (par: Note | null) => void,\n}\n\nexport const DeleteButton: React.FC<Props> = ({\n  id,\n  listRerenderQuery,\n  cleanUpNoteForEdit,\n}) => {\n  const [ConfirmationModalRendered, setConfirmationModalRendered] = useState(false);\n  const [noteForDeleteId, setNoteForDeleteId] = useState(-1);\n\n  const askForNoteDelete = (noteId: number | null) => {\n    if (noteId || noteId === 0) {\n      setNoteForDeleteId(noteId);\n      setConfirmationModalRendered(true);\n    }\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        name=\"delete\"\n        onClick={() => {\n          askForNoteDelete(id);\n        }}\n        className=\"Notes__note-delete\"\n      >\n        Delete\n      </button>\n      <ConfirmationModal\n        isOpen={ConfirmationModalRendered}\n        changeModalRenderStatus={setConfirmationModalRendered}\n        buttonName=\"delete\"\n        functionOnConfirmation={deleteNote}\n        noteForDeleteId={noteForDeleteId}\n        listRerenderQuery={listRerenderQuery}\n        cleanUpNoteForEdit={cleanUpNoteForEdit}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Redirect, Route, useHistory } from 'react-router-dom';\n\nimport { DeleteButton } from '../buttons/Delete';\n\nimport { Note } from '../../typedefs/Note';\n\nimport './Notes.scss';\n\ninterface Props {\n  notes: Note[] | null,\n  listRerenderQuery: (par: Note[] | null) => void,\n  passNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Notes: React.FC<Props> = ({\n  notes,\n  listRerenderQuery,\n  passNoteForEdit,\n}) => {\n  const history = useHistory();\n\n  const editeNote = (note: Note) => {\n    passNoteForEdit(note);\n    history.push('/edit');\n  };\n\n  return (\n    <ul className=\"Notes\">\n      {notes && notes.map((note) => (\n        <li className=\"Notes__note\" key={note.id}>\n          \n          <h3 className=\"Notes__note-title\">\n            {note.title}\n          </h3>\n          <p className=\"Notes__note-text\">\n            {note.text}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              editeNote(note);\n            }}\n            className=\"Notes__note-edit\"\n          >\n            Edit\n          </button>\n\n          <DeleteButton\n            id={note.id}\n            listRerenderQuery={listRerenderQuery}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Redirect, Route, Switch, useHistory,\n} from 'react-router-dom';\n\nimport { ConfirmationModal } from '../modals/Confirmation';\n\nimport { addNoteToLocalStorage } from '../../data-processing/addNoteToLocalStorage';\nimport { editNoteInLocalStorage } from '../../data-processing/editNoteInLocalStorage';\nimport { getNotesFromLocalStorage } from '../../data-processing/getNotesFromLocalStorage';\n\nimport { Note } from '../../typedefs/Note';\nimport { DeleteButton } from '../buttons/Delete';\n\ninterface Props {\n  listRerenderQuery: (par: Note[] | null) => void,\n  chosenNoteForEdit: Note | null,\n  cleanUpNoteForEdit: (par: Note | null) => void,\n}\n\nexport const Edit: React.FC<Props> = ({\n  listRerenderQuery,\n  chosenNoteForEdit,\n  cleanUpNoteForEdit,\n}) => {\n  const [initialNoteState, setInitialNoteState] = useState('');\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [onSaveModalRendered, setOnSaveModalRendered] = useState(false);\n  const [onCancelModalRendered, setOnCancelModalRendered] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    let initialNote = '';\n\n    if (chosenNoteForEdit?.title) {\n      setTitle(chosenNoteForEdit.title);\n      initialNote += chosenNoteForEdit.title;\n    }\n\n    if (chosenNoteForEdit?.text) {\n      setText(chosenNoteForEdit.text);\n      initialNote += chosenNoteForEdit.text;\n    }\n\n    setInitialNoteState(initialNote);\n\n    console.log();\n  }, []);\n\n  const inputChangeHandle = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'title':\n        setTitle(event.target.value);\n        break;\n      case 'text':\n        setText(event.target.value);\n        break;\n      default:\n    }\n  };\n\n  const handleClickOnSaveButton = () => {\n    setOnSaveModalRendered(true);\n  };\n\n  const saveNote = () => {\n    if (chosenNoteForEdit) {\n      editNoteInLocalStorage(\n        chosenNoteForEdit.id,\n        title,\n        text,\n      );\n\n      cleanUpNoteForEdit(null);\n    } else {\n      addNoteToLocalStorage(title, text);\n    }\n\n    listRerenderQuery(getNotesFromLocalStorage());\n    history.push('/');\n  };\n\n  const handleClickOnCancelButton = () => {\n    if (title + text === initialNoteState) {\n      cleanUpNoteForEdit(null);\n      history.push('/');\n    }\n\n    setOnCancelModalRendered(true);\n  };\n\n  const cancelEditing = () => {\n    cleanUpNoteForEdit(null);\n    history.push('/');\n  };\n\n  return (\n    <div className=\"Edit\">\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        value={title}\n        onChange={inputChangeHandle}\n        name=\"title\"\n      />\n      <textarea\n        placeholder=\"Text\"\n        value={text}\n        onChange={inputChangeHandle}\n        name=\"text\"\n      />\n      <button\n        type=\"button\"\n        name=\"name\"\n        className=\"button\"\n        onClick={handleClickOnSaveButton}\n        disabled={!title || !(initialNoteState !== title + text)}\n      >\n        Save\n      </button>\n      <ConfirmationModal\n        isOpen={onSaveModalRendered}\n        changeModalRenderStatus={setOnSaveModalRendered}\n        buttonName=\"save\"\n        functionOnConfirmation={saveNote}\n      />\n\n      <button\n        type=\"button\"\n        name=\"name\"\n        className=\"button\"\n        onClick={handleClickOnCancelButton}\n      >\n        Cancel\n      </button>\n      <ConfirmationModal\n        isOpen={onCancelModalRendered}\n        changeModalRenderStatus={setOnCancelModalRendered}\n        buttonName=\"cancel\"\n        functionOnConfirmation={cancelEditing}\n      />\n\n      {chosenNoteForEdit && (\n        <DeleteButton\n          id={chosenNoteForEdit.id}\n          listRerenderQuery={listRerenderQuery}\n          cleanUpNoteForEdit={cleanUpNoteForEdit}\n        />\n      )}\n    </div> \n  );\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const editNoteInLocalStorage = (\n  targetNoteId: number,\n  title: string,\n  text: string,\n) => {\n  const notes = getNotesFromLocalStorage();\n\n  if (notes) {\n    const preparedNote = {\n      id: targetNoteId,\n      title,\n      text,\n    };\n  \n    const targetNoteIndex = notes.findIndex(\n      ({ id }) => id === targetNoteId,\n    );\n  \n    const editedNotes = [...notes];\n\n    editedNotes.splice(\n      targetNoteIndex,\n      1,\n      preparedNote,\n    );\n\n    updateNotesInLocalStorage(editedNotes);\n  }\n};\n","import { getNotesFromLocalStorage } from './getNotesFromLocalStorage';\nimport { Note } from '../typedefs/Note';\nimport { updateNotesInLocalStorage } from './updateNotesInLocalStorage';\n\nexport const addNoteToLocalStorage = (\n  title: string,\n  text: string,\n) => {\n  if (title || text) {\n    let notes: Note[] | null = getNotesFromLocalStorage();\n\n    if (!notes) {\n      notes = [];\n    }\n\n    const noteToPush = {\n      id: notes.length\n        ? notes[notes.length - 1].id + 1\n        : 0,\n      title: title || null,\n      text: text || null,\n    };\n\n    notes.push(noteToPush);\n\n    updateNotesInLocalStorage(notes);\n  }\n};\n","// react library constituents\nimport React, { useState, useEffect } from 'react';\nimport { Route, Switch, Link } from 'react-router-dom';\n\n// react components\nimport { Notes } from './components/Notes';\nimport { Edit } from './components/Edit';\n\n// helping functions\nimport { getNotesFromLocalStorage } from './data-processing/getNotesFromLocalStorage';\n\n// other\nimport './App.scss';\nimport { Note } from './typedefs/Note';\n\nexport const App: React.FC = () => {\n  const [notesFromLocalStorage, setNotes] = useState<Note[] | null>(null);\n  const [noteForEdit, setNoteForEdit] = useState<Note | null>(null);\n\n  useEffect(() => {\n    setNotes(getNotesFromLocalStorage());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <h1 className=\"App__title\">Notes</h1>\n          <Link to=\"/edit\">\n            New note\n          </Link>\n          <Notes\n            notes={notesFromLocalStorage}\n            listRerenderQuery={setNotes}\n            passNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <Route path=\"/edit\">\n          <Edit\n            listRerenderQuery={setNotes}\n            chosenNoteForEdit={noteForEdit}\n            cleanUpNoteForEdit={setNoteForEdit}\n          />\n        </Route>\n\n        <p>Error — page is not exist</p>\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}